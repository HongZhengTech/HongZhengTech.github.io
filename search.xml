<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/04/hello-world/"/>
      <url>/2023/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用数据结构介绍</title>
      <link href="/2023/05/04/struct/"/>
      <url>/2023/05/04/struct/</url>
      
        <content type="html"><![CDATA[<h1 id="常用数据结构介绍"><a href="#常用数据结构介绍" class="headerlink" title="常用数据结构介绍"></a>常用数据结构介绍</h1><h1 id="0-概述"><a href="#0-概述" class="headerlink" title="0 概述"></a>0 概述</h1><p>数据结构描述了计算机中存储、组织数据的方式。许多大型系统的编写经验显示，程序设计的困难程度与最终成果的质量与表现，取决于是否选择了最适合的数据结构。</p><p>数据结构种类非常多，而且每个种类下的细分种类也很多。这里主要介绍8种最常用的数据结构。</p><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h1><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled.png" alt="Untitled"></p><p>数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。</p><p>数组包括一维数组和多维数组。</p><h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2 链表"></a>2 链表</h1><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%201.png" alt="Untitled"></p><p>链表相较于数组，除了数据域，还增加了指针域用于构建链式的存储数据。链表中每一个节点都包含此节点的数据和指向下一节点地址的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。</p><p>这表现在对节点进行增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点。不过事物皆有两极，指针带来高自由度的同时，自然会牺牲数据查找的效率和多余空间的使用。</p><p>链表包括单向链表、双向链表、循环链表。跳表也是链表的一种形式。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单向链表的增删查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedNode</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> data: <span class="built_in">number</span>, <span class="keyword">public</span> next: LinkedNode | <span class="literal">null</span> = <span class="literal">null</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">head</span>: <span class="title class_">LinkedNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">insert</span>(<span class="params">data: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">delete</span>(<span class="params">data: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">data</span> === data) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.<span class="property">next</span>.<span class="property">data</span> === data) &#123;</span><br><span class="line">                current.<span class="property">next</span> = current.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">search</span>(<span class="attr">data</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">LinkedNode</span> | <span class="literal">null</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.<span class="property">data</span> === data) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">1</span>);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">4</span>);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">list.<span class="title function_">delete</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">search</span>(<span class="number">3</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">search</span>(<span class="number">4</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="2-1-链表与数组的比对"><a href="#2-1-链表与数组的比对" class="headerlink" title="2.1 链表与数组的比对"></a>2.1 链表与数组的比对</h2><table><thead><tr><th></th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>内存地址</td><td>连续。</td><td>不连续。</td></tr><tr><td>增删效率</td><td>低。为了保持存储的连续性，需要移动对应元素后面所有元素的位置。</td><td>高。只需要修改对应元素的指针指向。</td></tr><tr><td>查询效率</td><td>高。由于数据存储的连续性和数据类型一致性，可通过index直接定位到对应元素。</td><td>低。需要按顺序从链表头节点开始顺着指向往后找。</td></tr></tbody></table><h1 id="3-栈"><a href="#3-栈" class="headerlink" title="3 栈"></a>3 栈</h1><p><img src="https://ask.qcloudimg.com/http-save/yehe-5359587/f1uyb7t5l4.gif" alt="https://ask.qcloudimg.com/http-save/yehe-5359587/f1uyb7t5l4.gif"></p><p>栈是一种比较简单的数据结构，常用一句话描述其特性，后进先出。栈本身是一个线性表，但是在这个表中只有一个口子允许数据的进出。</p><p>栈的常用操作包括入栈push和出栈pop，对应于数据的压入和压出。还有访问栈顶数据、判断栈是否为空和判断栈的大小等。由于栈后进先出的特性，常可以作为数据操作的临时容器，对数据的顺序进行调控，与其它数据结构相结合可获得许多灵活的处理。</p><h1 id="4-队列"><a href="#4-队列" class="headerlink" title="4 队列"></a>4 队列</h1><p><img src="https://ask.qcloudimg.com/http-save/yehe-5359587/uj2ybsqwq7.gif" alt="https://ask.qcloudimg.com/http-save/yehe-5359587/uj2ybsqwq7.gif"></p><p>队列是栈的兄弟结构，与栈的后进先出相对应，队列是一种先进先出的数据结构。顾名思义，队列的数据存储是如同排队一般，先存入的数据先被压出。常与栈一同配合，可发挥最大的实力。</p><p>队列包括单向队列和双向队列。</p><h1 id="5-树"><a href="#5-树" class="headerlink" title="5 树"></a>5 树</h1><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%202.png" alt="Untitled"></p><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%203.png" alt="Untitled"></p><p>树作为一种树状的数据结构，其数据节点之间的关系也如大树一样，将有限个节点根据不同层次关系进行排列，从而形成数据与数据之间的父子关系。常见的数的表示形式更接近“倒挂的树”，因为它将根朝上，叶朝下。</p><p>树的数据存储在结点中，每个结点有零个或者多个子结点。没有父结点的结点在最顶端，成为根节点；没有非根结点有且只有一个父节点；每个非根节点又可以分为多个不相交的子树。</p><p>这意味着树是具备层次关系的，父子关系清晰，家庭血缘关系明朗；这也是树与图之间最主要的区别。</p><p>树可看作是链表的高配版。树的实现就是对链表的指针域进行了扩充，增加了多个地址指向子结点。同时将“链表”竖起来，从而凸显了结点之间的层次关系，更便于分析和理解。</p><p>树可以衍生出许多的结构，若将指针域设置为双指针，那么即可形成最常见的二叉树，即每个结点最多有两个子树的树结构。二叉树根据结点的排列和数量还可进一度划分为完全二叉树、满二叉树、平衡二叉树、红黑树等。</p><p>树的应用场景较多，在操作系统文件系统的存储中用到了树的数据结构。</p><h2 id="5-2-树的分类"><a href="#5-2-树的分类" class="headerlink" title="5.2 树的分类"></a>5.2 树的分类</h2><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>除了最后一层结点，其它层的结点数都达到了最大值；同时最后一层的结点都是按照从左到右依次排布。</p><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>除了最后一层，其它层的结点都有两个子结点。</p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>对于其上的每个节点，若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；它的左、右子树也分别为二叉排序树。</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡二叉树又被称为AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树的增删查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> val: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> left: TreeNode | <span class="literal">null</span> = <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> right: TreeNode | <span class="literal">null</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">root</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">insert</span>(<span class="attr">val</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">root</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">insertNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span>, <span class="attr">node</span>: <span class="title class_">TreeNode</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.<span class="property">val</span> &gt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                root.<span class="property">left</span> = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(root.<span class="property">left</span>, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                root.<span class="property">right</span> = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(root.<span class="property">right</span>, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">inOrderTraverse</span>(): <span class="built_in">number</span>[] &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">inOrderTraverseNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>, <span class="attr">result</span>: <span class="built_in">number</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(root.<span class="property">left</span>, result);</span><br><span class="line">            result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(root.<span class="property">right</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">preOrderTraverse</span>(): <span class="built_in">number</span>[] &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">preOrderTraverseNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>, <span class="attr">result</span>: <span class="built_in">number</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(root.<span class="property">left</span>, result);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(root.<span class="property">right</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">postOrderTraverse</span>(): <span class="built_in">number</span>[] &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">postOrderTraverseNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>, <span class="attr">result</span>: <span class="built_in">number</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(root.<span class="property">left</span>, result);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(root.<span class="property">right</span>, result);</span><br><span class="line">            result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">search</span>(<span class="attr">val</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">searchNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>, <span class="attr">val</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.<span class="property">val</span> &gt; val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(root.<span class="property">left</span>, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.<span class="property">val</span> &lt; val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(root.<span class="property">right</span>, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">remove</span>(<span class="attr">val</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">root</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">removeNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>, <span class="attr">val</span>: <span class="built_in">number</span>): <span class="title class_">TreeNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.<span class="property">val</span> &gt; val) &#123;</span><br><span class="line">            root.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(root.<span class="property">left</span>, val);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.<span class="property">val</span> &lt; val) &#123;</span><br><span class="line">            root.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(root.<span class="property">right</span>, val);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; root.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.<span class="property">right</span>;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.<span class="property">left</span>;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> aux = <span class="variable language_">this</span>.<span class="title function_">findMinNode</span>(root.<span class="property">right</span>);</span><br><span class="line">            root.<span class="property">val</span> = aux.<span class="property">val</span>;</span><br><span class="line">            root.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(root.<span class="property">right</span>, aux.<span class="property">val</span>);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">findMinNode</span>(<span class="attr">root</span>: <span class="title class_">TreeNode</span>): <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (root.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            root = root.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> <span class="title function_">BST</span>();</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">11</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">7</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">15</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">9</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">8</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">10</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">13</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">inOrderTraverse</span>()); <span class="comment">// [3, 5, 7, 8, 9, 10, 11, 13, 15]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">preOrderTraverse</span>()); <span class="comment">// [11, 7, 5, 3, 9, 8, 10, 15, 13]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">postOrderTraverse</span>()); <span class="comment">// [3, 5, 8, 10, 9, 7, 13, 15, 11]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">search</span>(<span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">search</span>(<span class="number">8</span>)); <span class="comment">// true</span></span><br><span class="line">bst.<span class="title function_">remove</span>(<span class="number">15</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">inOrderTraverse</span>()); <span class="comment">// [3, 5, 7, 8, 9, 10, 11, 13]</span></span><br></pre></td></tr></table></figure><h1 id="6-堆"><a href="#6-堆" class="headerlink" title="6 堆"></a>6 堆</h1><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%204.png" alt="Untitled"></p><p>了解完二叉树，再来理解堆就不是什么难事了。堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。</p><p>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1，2n+2，因此可以直接用数组来表示一个堆。</p><p>不仅如此，堆还有一个性质：堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</p><p>堆常用来实现优先队列，在面试中经常考的问题都是与排序有关，比如堆排序、topK问题等。由于堆的根节点是序列中最大或者最小值，因而可以在建堆以及重建堆的过程中，筛选出数据序列中的极值，从而达到排序或者挑选topK值的目的。****</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大根堆的维护</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">data</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">size</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">isEmpty</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">insert</span>(<span class="attr">item</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">1</span>] = item;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">shiftUp</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">shiftUp</span>(<span class="attr">k</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">data</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(k / <span class="number">2</span>)] &lt; <span class="variable language_">this</span>.<span class="property">data</span>[k]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">swap</span>(k, <span class="title class_">Math</span>.<span class="title function_">floor</span>(k / <span class="number">2</span>));</span><br><span class="line">            k = <span class="title class_">Math</span>.<span class="title function_">floor</span>(k / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">swap</span>(<span class="attr">i</span>: <span class="built_in">number</span>, <span class="attr">j</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>[i] = <span class="variable language_">this</span>.<span class="property">data</span>[j];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">extractMax</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> ret = <span class="variable language_">this</span>.<span class="property">data</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">swap</span>(<span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">shiftDown</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">shiftDown</span>(<span class="attr">k</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= <span class="variable language_">this</span>.<span class="property">count</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">data</span>[j + <span class="number">1</span>] &gt; <span class="variable language_">this</span>.<span class="property">data</span>[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[k] &gt;= <span class="variable language_">this</span>.<span class="property">data</span>[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">swap</span>(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line"><span class="keyword">const</span> maxHeap = <span class="keyword">new</span> <span class="title class_">MaxHeap</span>();</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">1</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">4</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">6</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">7</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">8</span>);</span><br><span class="line">maxHeap.<span class="title function_">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!maxHeap.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(maxHeap.<span class="title function_">extractMax</span>());</span><br><span class="line">&#125; <span class="comment">// 9 8 7 6 5 4 3 2 1</span></span><br></pre></td></tr></table></figure><h1 id="7-图"><a href="#7-图" class="headerlink" title="7 图"></a>7 图</h1><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%205.png" alt="Untitled"></p><p>图结构一般包括顶点和边，顶点通常用圆圈来表示，边就是这些圆圈之间的连线。边还可以根据顶点之间的关系设置不同的权重，默认权重相同皆为1。此外根据边的方向性，还可将图分为有向图和无向图。</p><h2 id="7-1-图的表示方法"><a href="#7-1-图的表示方法" class="headerlink" title="7.1 图的表示方法"></a>7.1 图的表示方法</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%206.png" alt="Untitled"></p><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%207.png" alt="Untitled"></p><p>用二维数组来存储节点间的关系。</p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%208.png" alt="Untitled"></p><p>在邻接表中，每一个顶点都对应着一条链表，链表中存储的是顶点能够达到的相邻顶点。存储的顺序可以按照顶点的编号顺序进行。比如上图中对于顶点B来说，其通过有向边可以到达顶点A和顶点E，那么其对应的邻接表中的顺序即B-&gt;A-&gt;E，其它顶点亦如此。</p><h3 id="逆邻接表"><a href="#逆邻接表" class="headerlink" title="逆邻接表"></a>逆邻接表</h3><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%209.png" alt="Untitled"></p><p>通过邻接表可以获得从某个顶点出发能够到达的顶点，从而省去了对不相连顶点的存储空间。然而，这还不够。对于有向图而言，图中有效信息除了从顶点“指出去”的信息，还包括从别的顶点“指进来”的信息。这里的“指出去”和“指进来”可以用出度和入度来表示。</p><blockquote><p><em>入度：有向图的某个顶点作为终点的次数和。<br>出度：有向图的某个顶点作为起点的次数和。</em></p></blockquote><p>由此看出，在对有向图进行表示时，邻接表只能求出图的出度，而无法求出入度。这个问题很好解决，那就是增加一个表用来存储能够到达某个顶点的相邻顶点。这个表称作逆邻接表。</p><p>逆邻接表与邻接表结构类似，只不过图的顶点链接着能够到达该顶点的相邻顶点。也就是说，邻接表时顺着图中的箭头寻找相邻顶点，而逆邻接表时逆着图中的箭头寻找相邻顶点。</p><p>邻接表和逆邻接表的共同使用下，就能够把一个完整的有向图结构进行表示。可以发现，邻接表和逆邻接表实际上有一部分数据时重合的，因此可以将两个表合二为一，从而得到了所谓的十字链表。</p><h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%2010.png" alt="Untitled"></p><p>十字链表似乎很简单，只需要通过相同的顶点分别链向以该顶点为终点和起点的相邻顶点即可。</p><p>但这并不是最优的表示方式。虽然这样的方式共用了中间的顶点存储空间，但是邻接表和逆邻接表的链表节点中重复出现的顶点并没有得到重复利用，反而是进行了再次存储。因此，上图的表示方式还可以进行进一步优化。</p><p>十字链表优化后，可通过扩展的顶点结构和边结构来进行正逆邻接表的存储：（下面的弧头可看作是边的箭头那端，弧尾可看作是边的圆点那端）</p><blockquote><p>data：用于存储该顶点中的数据；<br>firstin指针：用于连接以当前顶点为弧头的其他顶点构成的链表，即从别的顶点指进来的顶点；<br>firstout指针：用于连接以当前顶点为弧尾的其他顶点构成的链表，即从该顶点指出去的顶点；</p></blockquote><p>边结构通过存储两个顶点来确定一条边，同时通过分别代表这两个顶点的指针来与相邻顶点进行链接：</p><blockquote><p>tailvex：用于存储作为弧尾的顶点的编号；<br>headvex：用于存储作为弧头的顶点的编号；<br>headlink 指针：用于链接下一个存储作为弧头的顶点的节点；<br>taillink 指针：用于链接下一个存储作为弧尾的顶点的节点；</p></blockquote><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%2011.png" alt="Untitled"></p><p>以上图为例子，对于顶点A而言，其作为起点能够到达顶点E。因此在邻接表中顶点A要通过边<code>AE</code>（即边04）指向顶点E，顶点A的<code>firstout</code>指针需要指向边04的<code>tailvex</code>。同时，从B出发能够到达A，所以在逆邻接表中顶点A要通过边<code>AB</code>（即边10）指向B，顶点A的<code>firstin</code>指针需要指向边10的弧头，即<code>headlink</code>指针。依次类推。</p><p>十字链表采用了一种看起来比较繁乱的方式对边的方向性进行了表示，能够在尽可能降低存储空间的情况下增加指针保留顶点之间的方向性。具体的操作可能一时间不好弄懂，建议多看几次上图，弄清指针指向的意义，明白正向和逆向邻接表的表示。</p><h1 id="8-散列表"><a href="#8-散列表" class="headerlink" title="8 散列表"></a>8 散列表</h1><p><img src="%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%20e93a376e1ea9478aac2e8f9a727ee3c5/Untitled%2012.png" alt="Untitled"></p><p>散列表也叫哈希表，是一种通过键值对直接访问数据的机构。在初中，我们就学过一种能够将一个x值通过一个函数获得对应的一个y值的操作，叫做映射。散列表的实现原理正是映射的原理，通过设定的一个关键字和一个映射函数，就可以直接获得访问数据的地址，实现O(1)的数据访问效率。在映射的过程中，事先设定的函数就是一个映射表，也可以称作散列函数或者哈希函数。</p><p>散列表的实现最关键的就是散列函数的定义和选择。一般常用的有以下几种散列函数：</p><blockquote><p>直接寻址法：取关键字或关键字的某个线性函数值为散列地址。<br>数字分析法：通过对数据的分析，发现数据中冲突较少的部分，并构造散列地址。例如同学们的学号，通常同一届学生的学号，其中前面的部分差别不太大，所以用后面的部分来构造散列地址。<br>平方取中法：当无法确定关键字里哪几位的分布相对比较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为散列地址。这是因为：计算平方之后的中间几位和关键字中的每一位都相关，所以不同的关键字会以较高的概率产生不同的散列地址。<br>取随机数法：使用一个随机函数，取关键字的随机值作为散列地址，这种方式通常用于关键字长度不同的场合。<br>除留取余法：取关键字被某个不大于散列表的表长 n 的数 m 除后所得的余数 p 为散列地址。这种方式也可以在用过其他方法后再使用。该函数对 m 的选择很重要，一般取素数或者直接用 n。</p></blockquote><p>确定好散列函数之后，通过某个<code>key</code>值的确会得到一个唯一的<code>value</code>地址。但是却会出现一些特殊情况。即通过不同的<code>key</code>值可能会访问到同一个地址，这个现象称之为冲突。</p><p>冲突在发生之后，当在对不同的<code>key</code>值进行操作时会使得造成相同地址的数据发生覆盖或者丢失，是非常危险的。所以在设计散列表往往还需要采用冲突解决的办法。</p><p>常用的冲突处理方式有很多，常用的包括以下几种：</p><blockquote><p>开放地址法（也叫开放寻址法）：实际上就是当需要存储值时，对Key哈希之后，发现这个地址已经有值了，这时该怎么办？不能放在这个地址，不然之前的映射会被覆盖。这时对计算出来的地址进行一个探测再哈希，比如往后移动一个地址，如果没人占用，就用这个地址。如果超过最大长度，则可以对总长度取余。这里移动的地址是产生冲突时的增列序量。<br>再哈希法：在产生冲突之后，使用关键字的其他部分继续计算地址，如果还是有冲突，则继续使用其他部分再计算地址。这种方式的缺点是时间增加了。<br>链地址法：链地址法其实就是对Key通过哈希之后落在同一个地址上的值，做一个链表。其实在很多高级语言的实现当中，也是使用这种方式处理冲突的。<br>公共溢出区：这种方式是建立一个公共溢出区，当地址存在冲突时，把新的地址放在公共溢出区里。</p></blockquote><p>目前比较常用的冲突解决方法是链地址法，一般可以通过数组和链表的结合达到冲突数据缓存的目的。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 采用除留取余法作为散列函数，开放地址法作为冲突解决方法，实现散列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line">    <span class="attr">table</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">loseloseHashCode</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            hash += key.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hashCode</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">loseloseHashCode</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">put</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> index = ++position;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">table</span>[index] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">key</span> === key) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">value</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> index = ++position;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] === <span class="literal">undefined</span> || <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> !== key) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> === key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">key</span> === key) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="literal">undefined</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> index = ++position;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] === <span class="literal">undefined</span> || <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> !== key) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> === key) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">table</span>[index] = <span class="literal">undefined</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span> + <span class="variable language_">this</span>.<span class="property">key</span> + <span class="string">&#x27; - &#x27;</span> + <span class="variable language_">this</span>.<span class="property">value</span> + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line"><span class="keyword">let</span> hash = <span class="keyword">new</span> <span class="title class_">HashTable</span>();</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Gandalf&#x27;</span>, <span class="string">&#x27;Foo&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Bar&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Tyrion&#x27;</span>, <span class="string">&#x27;Baz&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Aaron&#x27;</span>, <span class="string">&#x27;Bax&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Donnie&#x27;</span>, <span class="string">&#x27;Qux&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Ana&#x27;</span>, <span class="string">&#x27;Quux&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Jonathan&#x27;</span>, <span class="string">&#x27;Quuz&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Jamie&#x27;</span>, <span class="string">&#x27;Corge&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Sue&#x27;</span>, <span class="string">&#x27;Grault&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Mindy&#x27;</span>, <span class="string">&#x27;Garply&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Paul&#x27;</span>, <span class="string">&#x27;Waldo&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Patrick&#x27;</span>, <span class="string">&#x27;Fred&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Peter&#x27;</span>, <span class="string">&#x27;Plugh&#x27;</span>)</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Bill&#x27;</span>, <span class="string">&#x27;Thud&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Ana&#x27;</span>)) <span class="comment">// Quux</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Gandalf&#x27;</span>)) <span class="comment">// Foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Loiane&#x27;</span>)) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">hash.<span class="title function_">remove</span>(<span class="string">&#x27;Gandalf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Gandalf&#x27;</span>)) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://cloud.tencent.com/developer/article/1634155">图解！24张图彻底弄懂九大常见数据结构！ - 腾讯云开发者社区-腾讯云</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
